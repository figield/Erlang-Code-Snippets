%% 1. How to run erlang command from unix shell:
$> erl -boot start_clean -noshell -eval 'io:format("hi\n")' -eval 'halt(0)'
% or
$> erl -boot start_clean -noshell -eval 'io:format("hi\n"), halt(0)'

% example:
erl -sname ad_service -eval 'ok=mnesia:create_schema([node()]).' -s init stop

%% 2. How to convert from decimal to binary:
>lists:flatten(io_lib:format("~8.2.0B", [127])).
"01111111"

> [P] = "+", erlang:integer_to_list(P, 2). 
"101011"

%% 3. How to convert from decimal to hexadecimal:
>lists:flatten(io_lib:format("~2.16.0B", [127])).
"7F"

> [P] = "+", erlang:integer_to_list(P, 16).
"2B"

% also:
> [P] = "+", erlang:integer_to_list(P, 10).
"43"

%% 4. Printing float numbers:
lists:flatten(io_lib:format("~.*..f", [2, S]));

% also:
> lists:flatten([io_lib:format("~8.2.0B,", [L]) || L <- [1,2,3]]).
> lists:flatten([io_lib:format("~2.16.0B ", [L]) || L <- [1,2,3]]).

%% 5. Tracing and debugging:
dbg:start().
dbg:tracer().
dbg:p(all, call).
dbg:p(all, c).
dbg:ctp().
dbg:tpl(erlang_module,'_','_',[{'_',[],[{return_trace}]}]).
dbg:tp(config_storage,[]).
dbg:tp(erlang_module,dbg:fun2ms(fun(_) -> return_trace() end)).
dbg:tp(ad_service_server, handle_request, []).
dbg:tp(http_utils, request_url, dbg:fun2ms(fun(_) -> return_trace()end)).
dbg:tpl(http_utils,'_','_',[]).
dbg:tpl(http_utils,query_to_record,1,[{'_',[],[return_trace]}]). 
dbg:tpl(programme, []).
 
dbg:tpl(my_module, dbg:fun2ms(fun(_) -> exception_trace() end)).

%% 6. OS cmd (uptime):
os:cmd("uptime").

%% 7. Binary to integer:

binary_to_integer(B=(<<_N, _/binary>>)) -> binary_to_integer(B, 0).

binary_to_integer(<<N, Rest/binary>>, Acc) when N >= $0 andalso N =< $9 ->
    binary_to_integer(Rest, (N - $0) + (Acc * 10));
binary_to_integer(<<>>, Acc) ->
    Acc.

% It is probably more efficient than: 

list_to_integer(binary_to_list()) 

%% 8. Run eunit tests:
erl -noshell -sasl errlog_type error -pa out/ -eval 'eunit:test(moduleWithEunitTests,[{verbose,true}]),init:stop().'

%%  9. How to load beam from out dir and start shell:
erl -sname test -sasl errlog_type error -pa out/

%% 10. Which process uses the most memory:
lists:reverse(lists:keysort(2,[{P, erlang:process_info(P, heap_size)} || P <- erlang:processes()])).

%% 11. Which ets table uses the most memory:
lists:reverse(lists:keysort(2,[{T, ets:info(T, memory)} || T <- ets:all()])).

%% 12. [erlang-questions] record type as variable

-record(x,{name,zz}).
-record(y,{yy,name}).
-export([test1/0,test2/0]).
-define(create(Type,Name),#Type{name = Name}).  %% <- in my opinion this is the most interesing part

test1() -> ?create(x,"Noel").  % -> {x,"Noel",undefined}
test2() -> ?create(y,"Noel").  % -> {y,undefined,"Noel"}

%% 13. binary_to_list VS bitstring_to_list  

1> A = <<1:2, 23:6>>.
<<"W">>
2> B = <<1:2, 23:5>>.
<<55:7>>
3> binary_to_list(A).
"W"
4> binary_to_list(B).
** exception error: bad argument
     in function  binary_to_list/1
        called as binary_to_list(<<55:7>>)
5> bitstring_to_list(A).
"W"
6> bitstring_to_list(B).
[<<55:7>>]




